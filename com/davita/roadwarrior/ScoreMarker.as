package com.davita.roadwarrior{	import flash.display.*;	import flash.events.*;	import com.greensock.TimelineLite;	import com.greensock.TweenLite;	import com.davita.roadwarrior.Globe;	import flash.net.URLRequest;	import flash.net.URLVariables;	/**	 * ...	 * @author Ian Kennedy	 */	public class ScoreMarker extends MovieClip	{		//---------------------------------------		// PRIVATE VARIABLES		//---------------------------------------		private var __courseWrapper:Object;		private var _challenges:int;		private var _miles:int;		private var _pageMask:Sprite = new Sprite();		//---------------------------------------		// CONSTRUCTOR		//---------------------------------------		public function ScoreMarker():void		{			if (stage)			{				init();			}			else			{				addEventListener(Event.ADDED_TO_STAGE, init);			}		}		//---------------------------------------		// PRIVATE METHODS		//---------------------------------------		private function init(e:Event = null):void		{			removeEventListener(Event.ADDED_TO_STAGE, init);			// mask the edges so they don't run into the wrapper			maskPage();			// find the wrapper and add miles and challenges			var success:Boolean = findWrapper();			if(success)			{				_miles = __courseWrapper.miles;				_challenges = __courseWrapper.challenges;			}			else			{				_miles = 5;				_challenges = 2;			}			updateScore();		}		private function findWrapper():Boolean		{			var curParent:DisplayObjectContainer = this.parent;			while (curParent)			{				if (curParent.hasOwnProperty("versionNumber") && curParent.hasOwnProperty("currentPage"))				{					__courseWrapper = curParent;					return true;				}				curParent = curParent.parent;			}			return false;		}		private function updateScore():void		{			updateTextFields();			addGlobe(_challenges);			scoreBoard_mc.open();		}		public function addGlobe(challenges:int):void		{			var globe:Globe = new Globe(challenges);			this.addChild(globe);			globe.x = 900;			globe.y = 600;			switch (challenges)			{				case 1 :					theBackground.gotoAndStop(2);					break;				case 2 :					theBackground.gotoAndStop(3);					break;				case 3 :					theBackground.gotoAndStop(4);					break;			}		}		public function changeBackground(frame:int):void		{			theBackground(gotoAndStop(frame));		}		public function endInOutB4game(delayTime:int):void		{			var endLesson:endBtn = new endBtn();			addChild(endLesson);			endLesson.x = 1200;			endLesson.y = 500;			var timeline:TimelineLite = new TimelineLite();			timeline.append(TweenLite.from(endLesson, 1, {alpha:0,x:1300,delay:delayTime}));			timeline.append(TweenLite.to(endLesson, 0, {alpha:0}));			timeline.append(TweenLite.to(endLesson, 1, {alpha:1,x:500}));		}		private function maskPage():void		{			_pageMask.graphics.beginFill(0x000000);			_pageMask.graphics.drawRect(0,.5,1000,599.5);			addChild(_pageMask);			this.mask = _pageMask;		}		private function updateTextFields():void		{			scoreBoard_mc.txtMiles.text = this._miles;			scoreBoard_mc.txtChallenges.text = this._challenges;		}	}}