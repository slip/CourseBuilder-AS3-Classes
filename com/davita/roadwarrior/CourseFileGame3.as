/*Copyright (c) 2012 Normal Software.  All rights reserved.  The copyrights embodied in the content of this file are licensed under the BSD (revised) open source license*/package com.davita.roadwarrior{	import flash.display.*;	import flash.events.*;	import fl.motion.easing.*;	import flash.text.*;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.media.SoundMixer;	import flash.net.URLRequest;	import flash.net.URLVariables;	import com.greensock.*;	import flash.events.Event;	import flash.text.TextField;	import fl.controls.RadioButtonGroup;	import com.davita.events.*;	/**	 *  base class for davita standard game files.	 *	 * @langversion ActionScript 3	 *@playerversion Flash 9.0.0	 *	 *@author Dean Hawkey	 *@since  2012	 */	public dynamic class CourseFileGame3 extends MovieClip 	{		private var __courseWrapper:Object;		private var _bookmark:int;		private var _challenges:int;		private var _miles:int;		public var sbOpenClose:Boolean;		public var tf:TextFormat = new TextFormat("Arial",12,0xFFFFFF);		public var avatarLoader:Loader = new Loader();		private var _pageMask:Sprite = new Sprite();		//---------------------------------------		// CONSTRUCTOR		//---------------------------------------		public function CourseFileGame3():void		{			if (stage)			{				init();			}			else			{				addEventListener(Event.ADDED_TO_STAGE, init);			}		}		//---------------------------------------		// PRIVATE METHODS		//---------------------------------------		private function init(e:Event = null):void		{			maskPage();			// find the wrapper and listen for a score updated event			var success:Boolean = findWrapper();			if(success)			{				__courseWrapper.addEventListener(ScoreUpdatedEvent.SCORE_UPDATED, updateScore, false, 0, true);				dispatchEvent(new ScorePollEvent(ScorePollEvent.SCORE_POLLED));			}								if (this.getChildByName("Clipboard_MC") != null)			{				this.Clipboard_MC.buttonMode = true;				this.Clipboard_MC.useHandCursor = true;			}				}			private function findWrapper():Boolean		{			var curParent:DisplayObjectContainer = this.parent;			while (curParent) 			{ 				if (curParent.hasOwnProperty("versionNumber") && curParent.hasOwnProperty("currentPage")) 				{ 					__courseWrapper = curParent;					trace("ScoreMarker:: found the wrapper");					return true;					// Object(curParent).loader.addEventListener("unload", dispose, false, 0, true); 				}				curParent = curParent.parent;			}			trace("ScoreMarker:: not in a wrapper");			return false;		}		private function maskPage():void		{			_pageMask.graphics.beginFill(0x000000);			_pageMask.graphics.drawRect(0,.5,1000,599.5);			addChild(_pageMask);			this.mask = _pageMask;		}		private function updateScore(e:Event):void		{			this._miles = e.milesAndChallengesArray[0];			this._challenges = e.milesAndChallengesArray[1];		}		private function setScore():void		{			var milesChallengesArray:Array = [_miles, _challenges];			dispatchEvent(new ScoreSetEvent(ScoreSetEvent.SCORE_SET, milesChallengesArray));			trace("CourseFileGame3 :: setScore :: " + milesChallengesArray);		}		//---------------------------------------		// Public METHODS		//---------------------------------------		// Keep score		public function addMiles(addedMiles:int):void		{			stage.addEventListener(Event.ENTER_FRAME, changeText);			trace("Adding Miles: " + addedMiles);			_miles = (_miles + addedMiles);			trace("Total Miles: " + _miles);			this.GameBoard_mc.txtMiles.text = _miles;			setScore();		}		public function addChallenges(addedChallenge:int):void		{			stage.addEventListener(Event.ENTER_FRAME, changeText);			trace("Adding Challenge Points: " + addedChallenge);			_challenges = (_challenges + addedChallenge);			trace("Total Challenge Points: " + _challenges);			this.GameBoard_mc.txtChallenges.text = _challenges;			setScore();		}		// Make sure text changes		public function changeText(evt:Event)		{			this.GameBoard_mc.txtMiles.text = _miles;			stage.removeEventListener(Event.ENTER_FRAME, changeText);		}		// [*********** Navigation Functions **************]		// Use this function for Next Button before the game starts. --- No Clipboard --- No Scoreboard calls		public function nextBtnBGSetup()		{			this.Next_BTNwBG_mc.visible = true;			this.Next_BTNwBG_mc.Next_BTN_mc.addEventListener(MouseEvent.CLICK, nextFrameBtnB4game);			this.Next_BTNwBG_mc.Next_BTN_mc.buttonMode = true;			this.Next_BTNwBG_mc.Next_BTN_mc.useHandCursor = true;		}		public function nextBtnSetup()		{			this.Next_BTN_mc.addEventListener(MouseEvent.CLICK, nextFrameBtn);			this.Next_BTN_mc.buttonMode = true;			this.Next_BTN_mc.useHandCursor = true;			this.Next_BTN_mc.visible = false;		}		//Animates Next Button Entry		public function nxtBtnIn(mc:MovieClip):void		{			stop();			mc.visible = true;			this.Next_BTNwBG_mc.Next_BTN_mc.visible = true;			var timeline:TimelineLite = new TimelineLite();			timeline.append(TweenLite.to(mc,1.5, {alpha:1,x:925}));		}		// Delays the entry of next button until time specified. For timing with end of avatar animation.;		public function delayNxtBtn(delayTime):void		{			this.Next_BTN_mc.visible = true;			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.from(this.Next_BTN_mc, 1, {alpha:0,delay:delayTime}));			timeline.append(TweenLite.to(this.Next_BTN_mc, 1, {alpha:1}));		}		// Delays the entry of next button until time specified. For timing with end of avatar animation.;		public function delayBGNxtBtn(delayTime):void		{			this.Next_BTNwBG_mc.visible = true;			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.from(this.Next_BTNwBG_mc, 1, {alpha:0,delay:delayTime}));			timeline.append(TweenLite.to(this.Next_BTNwBG_mc, 1, {alpha:1}));		}		//Animates Next Button Entry;		public function nxtBtnOut(mc:MovieClip):void		{			stop();			mc.visible = true;			this.Next_BTNwBG_mc.Next_BTN_mc.visible = true;			var timeline:TimelineLite = new TimelineLite();			timeline.append(TweenLite.to(mc,.5, {alpha:1,x:1025}));		}		// Next Button Click Event;		public function nextFrameBtn(event:MouseEvent):void		{			nextFrame();			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			closeClipBoard();			if (GameBoard_mc != null)			{				if (sbOpenClose == false)				{					timeline.append(TweenLite.to(this.GameBoard_mc,1, {alpha:1,x:-282}));					sbOpenClose = true;				}			}			else			{				trace("No Storyboard to remove yet");			}		}		public function nextFrameBtnB4game(event:MouseEvent):void		{			nextFrame();		}		// Clipboard Functions		public function cbStartBtn(event:MouseEvent):void		{			Clipboard_MC.gotoAndPlay("CB_Start");		}		public function closeClipBoard():void		{			if (Clipboard_MC != null)			{				this.Clipboard_MC.gotoAndStop(1);			}		}		//  [**************** Content Tweening *********************];		// Text Box Standard Fade in		public function txtFadeIn(mc:MovieClip):void		{			stop();			mc.alpha = 0;			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.from(mc, 1, {alpha:0,x:72, y:-200}));			timeline.append(TweenLite.to(mc, 2, {alpha:1,x:72, y:-20}));			timeline.append(TweenLite.to(mc, .2, {alpha:1, colorTransform:{exposure:1.9}}));			timeline.append(TweenLite.to(mc, .25, {alpha:.9, colorTransform:{exposure:1}}));		}		// Add tip to stage where you want it to pause. Pass MC instance name and amount of time you want it to pause.		public function tipInOut(mc:MovieClip,delayIn,delayOut):void		{			var timeline:TimelineLite = new TimelineLite();			timeline.append(TweenLite.from(mc, 1, {alpha:0,delay:delayIn}));			timeline.append(TweenLite.to(mc, .5, {alpha:1}));			timeline.append(TweenLite.to(mc, 1, {alpha:0,x:1300,delay:delayOut}));		}		public function endInOut(delayTime):void		{			var endLesson:endBtn = new endBtn();			addChild(endLesson);			endLesson.x = 1200;			endLesson.y = 500;			var timeline:TimelineLite = new TimelineLite({onComplete:removeAvatar});			timeline.append(TweenLite.from(endLesson, 1, {alpha:0,x:1300,delay:delayTime}));			timeline.append(TweenLite.to(endLesson, 0, {alpha:0}));			timeline.append(TweenLite.to(avatarLoader, 1, {alpha:0,x:-1000}));			timeline.append(TweenLite.to(endLesson, 1, {alpha:1,x:500}));		}		// Move Question off stage when answered correctly		public function textOut(mc:MovieClip):void		{			var timeline:TimelineLite = new TimelineLite();			timeline.append(TweenLite.from(mc, 1.5, {alpha:1}));			timeline.append(TweenLite.to(mc, 7, {alpha:0,y:-640}));		}		// [*************** Scoreboard Functions **********************]		// Scoreboard Tab Button		public function OpenSBbtn(event:MouseEvent):void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			if (sbOpenClose == true)			{				timeline.append(TweenLite.to(this.GameBoard_mc,1.5, {alpha:1,x:-40}));				sbOpenClose = false;			}			else			{				timeline.append(TweenLite.to(this.GameBoard_mc,1, {alpha:1,x:-282}));				sbOpenClose = true;			}		}		// Open Scoreboard for use in timeline calls		public function OpenSB():void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.to(this.GameBoard_mc, 2, {alpha:1,x:-40}));			sbOpenClose = true;		}		// Close Scoreboard for use in timeline calls and Next Button Function		public function CloseSB():void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.to(this.GameBoard_mc, 2, {alpha:1,x:-282}));			sbOpenClose = false;		}		// Setup the Scoreboard Tab Button		public function gameBoardBtnSetup()		{			if (this.GameBoard_mc.x <= -200)			{				sbOpenClose = true;						} else {				sbOpenClose = false;			}			this.GameBoard_mc.OpenSBtab.addEventListener(MouseEvent.CLICK, OpenSBbtn);			this.GameBoard_mc.OpenSBtab.buttonMode = true;			this.GameBoard_mc.OpenSBtab.useHandCursor = true;		}		// [*********************** Avatar Functions **********************]		// Avatar Positions		public function LoadAvaInPos(xPos,yPos,avatarLoader):void		{			// Align			addChild(avatarLoader);			avatarLoader.x = xPos;			avatarLoader.y = yPos;			avatarLoader.name = "Avatar";			avatarLoader.content.msPlay('Message 1');		}		public function avatarPreloader()		{			// Start Pre-Loader			addChild(avatarLoading);			avatarLoading.x = 500;			avatarLoading.y = 300;		}		public function removeAvatar():void		{			removeChild(getChildByName("Avatar"));			SoundMixer.stopAll();		}	}}