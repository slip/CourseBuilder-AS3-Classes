/*Copyright (c) 2012 Normal Software.  All rights reserved.  The copyrights embodied in the content of this file are licensed under the BSD (revised) open source license*/package com.davita.roadwarrior{	import flash.display.*;	import flash.events.*;	import fl.motion.easing.*;	import flash.text.*;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.media.SoundMixer;	import flash.net.URLRequest;	import flash.net.URLVariables;	import com.greensock.*;	import flash.events.Event;	import flash.text.TextField;	import fl.controls.RadioButtonGroup;	import com.davita.events.*;	/*dean's import statements*/	import flash.utils.Timer;	import flash.utils.getTimer;	import com.davita.roadwarrior.ScoreBoard;	import com.davita.roadwarrior.RWAnimator;	import com.davita.roadwarrior.NextButtonRW;	import com.davita.roadwarrior.EndBtnRW;	/**	 *  base class for davita standard game files.	 *	 * @langversion ActionScript 3	 *@playerversion Flash 9.0.0	 *	 *@author Dean Hawkey	 *@since  2012	 */	public dynamic class CourseFileGame3 extends MovieClip 	{		private var __courseWrapper:Object;		private var _bookmark:int;		private var _challenges:int;		private var _miles:int;		public var sbOpenClose:Boolean;		public var tf:TextFormat = new TextFormat("Arial",12,0xFFFFFF);		public var avatarLoader:Loader = new Loader();		private var _pageMask:Sprite = new Sprite();		//---------------------------------------		// Dean's PRIVATE & PROTECTED INSTANCE VARIABLES		//---------------------------------------		public var specificFrameAdvance:String;		public var delayTime:int;		public var myAnimator:RWAnimator = new RWAnimator();		public var myNextButtonWithBackground:NextButtonRW;		public var endButton:EndBtnRW = new EndBtnRW();		public var booAS2:Boolean = false;		//---------------------------------------		// CONSTRUCTOR		//---------------------------------------		public function CourseFileGame3():void		{			if (stage)			{				init();			}			else			{				addEventListener(Event.ADDED_TO_STAGE, init);			}		}		//---------------------------------------		// PRIVATE METHODS		//---------------------------------------		private function init(e:Event = null):void		{			maskPage();			// find the wrapper and listen for a score updated event			var success:Boolean = findWrapper();			if (success)			{				__courseWrapper.addEventListener(ScoreUpdatedEvent.SCORE_UPDATED, updateScore, false, 0, true);				dispatchEvent(new ScorePollEvent(ScorePollEvent.SCORE_POLLED));			}			if (this.getChildByName("Clipboard_MC") != null)			{				this.Clipboard_MC.buttonMode = true;				this.Clipboard_MC.useHandCursor = true;			}		}		private function findWrapper():Boolean		{			var curParent:DisplayObjectContainer = this.parent;			while (curParent)			{				if (curParent.hasOwnProperty("versionNumber") && curParent.hasOwnProperty("currentPage"))				{					__courseWrapper = curParent;					trace("CourseFileGame3:: found the wrapper");					return true;					// Object(curParent).loader.addEventListener("unload", dispose, false, 0, true); 				}				curParent = curParent.parent;			}			trace("CourseFileGame3:: not in a wrapper");			return false;		}		private function maskPage():void		{			_pageMask.graphics.beginFill(0x000000);			_pageMask.graphics.drawRect(0,.5,1000,599.5);			addChild(_pageMask);			this.mask = _pageMask;		}		private function updateScore(e:Event):void		{			this._miles = e.milesAndChallengesArray[0];			this._challenges = e.milesAndChallengesArray[1];		}		private function setScore():void		{			var milesChallengesArray:Array = [_miles,_challenges];			dispatchEvent(new ScoreSetEvent(ScoreSetEvent.SCORE_SET, milesChallengesArray));			trace("CourseFileGame3 :: setScore :: " + milesChallengesArray);		}		//---------------------------------------		// Public METHODS		//---------------------------------------		// Keep score		public function addMiles(addedMiles:int):void		{			stage.addEventListener(Event.ENTER_FRAME, changeText);			trace("Adding Miles: " + addedMiles);			_miles = (_miles + addedMiles);			trace("Total Miles: " + _miles);			this.scoreBoard.txtMiles.text = _miles;			setScore();			playCorrectBell();			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			if (sbOpenClose == true)			{				trace("Open Scoreboard");				timeline.append(TweenLite.to(this.scoreBoard,1, {alpha:1,x:-40}));				timeline.append(TweenLite.to(this.scoreBoard,1, {alpha:1,x:-282,delay:1}));				sbOpenClose = true;			}		}		public function addChallenges(addedChallenge:int):void		{			stage.addEventListener(Event.ENTER_FRAME, changeText);			trace("Adding Challenge Points: " + addedChallenge);			_challenges = (_challenges + addedChallenge);			trace("Total Challenge Points: " + _challenges);			this.scoreBoard.txtChallenges.text = _challenges;			setScore();		}		// Make sure text changes		public function changeText(evt:Event)		{			this.scoreBoard.txtMiles.text = _miles;			stage.removeEventListener(Event.ENTER_FRAME, changeText);		}		//---------------------------------------		// Clipboard Methods		//---------------------------------------		// On click open Clipboard		public function cbStartBtn(event:MouseEvent):void		{			Clipboard_MC.gotoAndPlay("CB_Start");		}		// Close the Clipboard;		public function closeClipBoard():void		{			if (Clipboard_MC != null)			{				this.Clipboard_MC.gotoAndStop(1);			}		}		//---------------------------------------;		// Scoreboard Methods		//---------------------------------------		// Scoreboard Tab Button		public function OpenSBbtn(event:MouseEvent):void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			if (sbOpenClose == true)			{				timeline.append(TweenLite.to(this.scoreBoard,1.5, {alpha:1,x:-40}));				sbOpenClose = false;			}			else			{				timeline.append(TweenLite.to(this.scoreBoard,1, {alpha:1,x:-282}));				sbOpenClose = true;			}		}		// Open Scoreboard for use in timeline calls		public function OpenSB():void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.to(this.scoreBoard, 2, {alpha:1,x:-40}));			sbOpenClose = true;		}		// Close Scoreboard for use in timeline calls and Next Button Function		public function CloseSB():void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			timeline.append(TweenLite.to(this.scoreBoard, 2, {alpha:1,x:-282}));			sbOpenClose = false;		}		// Setup the Scoreboard Tab Button		public function gameBoardBtnSetup()		{			if (this.scoreBoard.x <= -200)			{				sbOpenClose = true;			}			else			{				sbOpenClose = false;			}			this.scoreBoard.OpenSBtab.addEventListener(MouseEvent.CLICK, OpenSBbtn);			this.scoreBoard.OpenSBtab.buttonMode = true;			this.scoreBoard.OpenSBtab.useHandCursor = true;		}		//---------------------------------------		// Avatar Methods		//---------------------------------------		// Avatar Positions		// New Avatar Methods		public function loadAvaInPos(xPos,yPos,avatarLoader):void		{			// Align			addChild(avatarLoader);			avatarLoader.x = xPos;			avatarLoader.y = yPos;			avatarLoader.name = "Avatar";		}		public function avatarPreloader()		{			//Start Pre-Loader			addChild(avatarLoading);			avatarLoading.x = 500;			avatarLoading.y = 300;		}		private function avatarLoaded(e:Event)		{			removeChild(avatarLoading);			// Check variable to see if this is an AS2 or AS3 avatar. Then play if it is AS2;			if (booAS2 == true)			{				avatarLoader.content.msPlay('Message 1');			}		}		public function removeAvatar():void		{			if (getChildByName("Avatar") != null)			{				removeChild(getChildByName("Avatar"));				SoundMixer.stopAll();			}		}		private function sendPositions(avaPositionsX,avaPositionsY)		{			loadAvaInPos(avaPositionsX,avaPositionsY,avatarLoader);		}		private function setAvatarAndPosition(avatarURL:URLRequest,avaPositionsX:int,avaPositionsY:int,avatarToRemove:Boolean)		{			if (removeAvatar == true)			{				stage.SoundMixer.stopAll();				this.removeAvatar();				trace("CourseFileNocturnalGame::setAvatarAndPosition - Removing avatar");			}			else			{				trace("CourseFileNocturnalGame::setAvatarAndPosition - Avatar = false");			}			sendPositions(avaPositionsX,avaPositionsY);			avatarPreloader();			avatarLoader.load(avatarURL);			avatarLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, avatarLoaded);		}		//---------------------------------------;		// End Button Methods		//---------------------------------------		// Add NextButtonWithBackground to Stage		private function addEndButtonWithDelay(delayTime:int):void		{			trace("addEndButtonWithDelay: " + delayTime);			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			this.endButton = new EndBtnRW();			this.endButton.x = 1050;			this.endButton.y = 530;			this.endButton.name = "endButton";			this.addChild(endButton);			// now animate the button alpha and position			timeline.append(TweenLite.from(endButton, 1, {alpha:0,delay:delayTime}));			timeline.append(TweenLite.to(endButton, 1, {alpha:1,x:500}));		}		//---------------------------------------		// Next Button Methods		//---------------------------------------		// Add NextButtonWithBackground to Stage		private function addNextButtonWithBackground(frameLabel:String, delayTime:int, nextHasBackground:Boolean):void		{			var timeline:TimelineLite = new TimelineLite({onComplete:stop});			//this.myNextButtonWithBackground = new NextButtonRW(frameLabel);			this.myNextButtonWithBackground = new NextButtonRW();			myNextButtonWithBackground.frameLabel = frameLabel;			this.myNextButtonWithBackground.x = 1050;			// Determine whether Next Button needs BG then set the X and Y coordinates			if (nextHasBackground == true)			{				//If it has a BG place it here				this.myNextButtonWithBackground.y = 530;			}			else			{				// If it does not then put it here				this.myNextButtonWithBackground.y = 475;			}			this.myNextButtonWithBackground.name = "myNextButtonWithBackground";			this.addChild(myNextButtonWithBackground);			// add a listener to myNextButtonWithBackground			this.myNextButtonWithBackground.addEventListener(MouseEvent.CLICK, animateNextButtonOut);			// now animate the button alpha and position;			timeline.append(TweenLite.from(myNextButtonWithBackground, 1, {alpha:0,delay:delayTime}));			timeline.append(TweenLite.to(myNextButtonWithBackground, 1, {alpha:1,x:925}));		}		private function animateNextButtonOut(event:MouseEvent):void		{			TweenLite.to(getChildByName("myNextButtonWithBackground"), 1, {alpha:0, x:1050, onComplete:removeNextButtonWithBackground});		}		private function removeNextButtonWithBackground():void		{			this.removeChild(getChildByName("myNextButtonWithBackground"));		}		//---------------------------------------		// Audio Methods		//---------------------------------------		private function playWrongBuzzer()		{			var sndWrong:audioWrong = new audioWrong();// Give variable a name then link it to the Liibrary item			var wrongChannel:SoundChannel = sndWrong.play();// Then tell it to play		}		function playCorrectBell()		{			var sndCorrect:audioCorrect = new audioCorrect();// Give variable a name then link it to the Liibrary item			var correctChannel:SoundChannel = sndCorrect.play();// Then tell it to play		}	}}